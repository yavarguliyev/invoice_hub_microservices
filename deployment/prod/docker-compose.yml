version: "3.8"

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
    networks:
      - common
    ports:
      - "8080:80"
    depends_on:
      - api-gateway
      - auth-service
      - invoice-service
      - order-service
    command: >
      sh -c "until curl --silent --head --fail http://api-gateway:3000; do echo 'Waiting for api-gateway...'; sleep 5; done &&
            until curl --silent --head --fail http://auth-service:4001/api/v1/auth; do echo 'Waiting for auth-service...'; sleep 5; done &&
            until curl --silent --head --fail http://invoice-service:4002/api/v1/invoices; do echo 'Waiting for invoice-service...'; sleep 5; done &&
            until curl --silent --head --fail http://order-service:4003/api/v1/orders; do echo 'Waiting for order-service...'; sleep 5; done &&
            nginx -g 'daemon off;'"

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/bitnami
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - common

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.6
    volumes:
      - kafka-data:/bitnami
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - common
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9100:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - common
    
  api-gateway:
    container_name: api-gateway
    image: invoice_hub_microservices_api-gateway
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 3000
        SERVICE_NAME: api-gateway
        ENV_PATH: ./deployment/prod/.env
    environment:
      - PORT=3000
    ports:
      - "3000:3000"
    networks:
      - common
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-gateway:3000"]
      interval: 10s
      retries: 5
    volumes:
      - ../../packages:/app/packages
    depends_on:
      - kafka
      - order-service
      - invoice-service
      - auth-service
    command: sh -c "yarn start:prod"

  auth-service:
    container_name: auth-service
    image: invoice_hub_microservices_auth-service
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 4001
        SERVICE_NAME: services/auth-service
        ENV_PATH: ./deployment/prod/.env
    environment:
      - PORT=4001
    networks:
      - common
    restart: always
    ports:
      - "4001:4001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/api/v1/auth"]
      interval: 10s
      retries: 3
    volumes:
      - ../../packages:/app/packages
    depends_on:
      - kafka
      - order-service
      - invoice-service
    command: sh -c "yarn start:prod"

  invoice-service:
    container_name: invoice-service
    image: invoice_hub_microservices_invoice-service
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 4002
        SERVICE_NAME: services/invoice-service
        ENV_PATH: ./deployment/prod/.env
    environment:
      - PORT=4002
    networks:
      - common
    restart: always
    ports:
      - "4002:4002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/api/v1/invoices"]
      interval: 10s
      retries: 3
    volumes:
      - ../../packages:/app/packages
    depends_on:
      - kafka
      - order-service
    command: sh -c "yarn start:prod"

  order-service:
    container_name: order-service
    image: invoice_hub_microservices_order-service
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 4003
        SERVICE_NAME: services/order-service
        ENV_PATH: ./deployment/prod/.env
    environment:
      - PORT=4003
    networks:
      - common
    restart: always
    ports:
      - "4003:4003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/api/v1/orders"]
      interval: 10s
      retries: 3
    volumes:
      - ../../packages:/app/packages
    depends_on:
      - kafka
    command: sh -c "yarn start:prod"

networks:
  common:
    driver: bridge

volumes:
  zookeeper-data:
  kafka-data:
