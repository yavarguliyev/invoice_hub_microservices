version: "3.8"

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
    networks:
      - common
    ports:
      - '8080:80'
    depends_on:
      - order-service
      - invoice-service
      - auth-service
      - api-gateway
    command: >
      sh -c "until curl --silent --head --fail http://api-gateway:3000; do echo 'Waiting for api-gateway...'; sleep 5; done &&
            nginx -g 'daemon off;'"

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:3.8
    ports:
      - '2181:2181'
    volumes:
      - zookeeper-data:/bitnami
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    networks:
      - common

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.6
    volumes:
      - kafka-data:/bitnami
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    ports:
      - '9092:9092'
      - '29092:29092'
    depends_on:
      - zookeeper
    healthcheck:
      test: ['CMD', 'kafka-topics.sh', '--list', '--bootstrap-server', 'kafka:9092']
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - common
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - '9100:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - common
    
  auth-db:
    container_name: auth-db
    image: postgres:13.5-alpine
    restart: always
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=auth_service_db
      - DB_DEFAULT_DATABASE=auth_service_db
      - DB_DEFAULT_HOST=auth-db
      - DB_DEFAULT_PORT=5432
    volumes:
      - auth-postgres-data:/var/lib/postgresql/data
    ports:
      - '54321:5432'
    networks:
      - common
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres', '-h', 'localhost', '-p', '5432']
      interval: 10s
      retries: 5
      timeout: 5s

  invoice-db:
    container_name: invoice-db
    image: postgres:13.5-alpine
    restart: always
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=invoice_service_db
      - DB_DEFAULT_DATABASE=invoice_service_db
      - DB_DEFAULT_HOST=invoice-db
      - DB_DEFAULT_PORT=54322
    volumes:
      - invoice-postgres-data:/var/lib/postgresql/data
    ports:
      - '54322:5432'
    networks:
      - common
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres', '-h', 'localhost', '-p', '5432']
      interval: 10s
      retries: 5
      timeout: 5s

  order-db:
    container_name: order-db
    image: postgres:13.5-alpine
    restart: always
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=order_service_db
      - DB_DEFAULT_DATABASE=order_service_db
      - DB_DEFAULT_HOST=order-db
      - DB_DEFAULT_PORT=54323
    volumes:
      - order-postgres-data:/var/lib/postgresql/data
    ports:
      - '54323:5432'
    networks:
      - common
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres', '-h', 'localhost', '-p', '5432']
      interval: 10s
      retries: 5
      timeout: 5s

  redis_auth:
    container_name: redis_auth_container
    image: redis:7.0
    ports:
      - '6381:6379'
    command: ['redis-server', '--requirepass', 'your_redis_password']
    restart: always
    volumes:
      - redis_auth_data:/data
    networks:
      - common
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s

  redis_invoice:
    container_name: redis_invoice_container
    image: redis:7.0
    ports:
      - '6382:6379'
    command: ['redis-server', '--requirepass', 'your_redis_password']
    restart: always
    volumes:
      - redis_invoice_data:/data
    networks:
      - common
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s

  redis_order:
    container_name: redis_order_container
    image: redis:7.0
    ports:
      - '6383:6379'
    command: ['redis-server', '--requirepass', 'your_redis_password']
    restart: always
    volumes:
      - redis_order_data:/data
    networks:
      - common
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - common

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    ports:
      - '3001:3000'
    depends_on:
      - order-service
      - invoice-service
      - auth-service
      - api-gateway
      - prometheus
    networks:
      - common
    volumes:
      - grafana-data:/var/lib/grafana

  api-gateway:
    container_name: api-gateway
    image: invoice_hub_microservices_api-gateway
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 3000
        SERVICE_NAME: api-gateway
        ENV_PATH: ./deployment/prod/.env
    environment:
      - PORT=3000
    ports:
      - '3000:3000'
    networks:
      - common
    restart: always
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://api-gateway:3000']
      interval: 10s
      retries: 5
    volumes:
      - ../../common:/app/common
    depends_on:
      - kafka
      - order-service
      - invoice-service
      - auth-service
    command: sh -c 'yarn start:prod'

  auth-service:
    container_name: auth-service
    image: invoice_hub_microservices_auth-service
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 4001
        SERVICE_NAME: services/auth-service
        ENV_PATH: ./deployment/prod/.env
    environment:
      - PORT=4001
      - POSTGRES_DB=auth_service_db
      - DB_DEFAULT_DATABASE=auth_service_db
      - DB_DEFAULT_HOST=auth-db
      - DB_DEFAULT_PORT=5432
      - REDIS_HOST=redis_auth_container
      - REDIS_PORT=6379
      - REDIS_PASSWORD=your_redis_password
      - REDIS_URL=redis://redis_auth_container:6379
      - REDIS_DEFAULT_CACHE_TTL=3600
    networks:
      - common
    restart: always
    ports:
      - '4001:4001'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4001/api/v1/auth']
      interval: 10s
      retries: 3
    volumes:
      - ../../common:/app/common
      - ../../services/auth-service/migrations:/app/services/auth-service/migrations:delegated
    depends_on:
      - auth-db
      - redis_auth
      - kafka
      - order-service
      - invoice-service
    command: sh -c 'yarn mup && yarn start:prod'

  invoice-service:
    container_name: invoice-service
    image: invoice_hub_microservices_invoice-service
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 4002
        SERVICE_NAME: services/invoice-service
        ENV_PATH: ./deployment/prod/.env
    environment:
      - PORT=4002
      - POSTGRES_DB=invoice_service_db
      - DB_DEFAULT_DATABASE=invoice_service_db
      - DB_DEFAULT_HOST=invoice-db
      - DB_DEFAULT_PORT=5432
      - REDIS_HOST=redis_invoice_container
      - REDIS_PORT=6379
      - REDIS_PASSWORD=your_redis_password
      - REDIS_URL=redis://redis_invoice_container:6379
      - REDIS_DEFAULT_CACHE_TTL=3600
    networks:
      - common
    restart: always
    ports:
      - '4002:4002'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4001/api/v1/invoices']
      interval: 10s
      retries: 3
    volumes:
      - ../../common:/app/common
      - ../../services/invoice-service/migrations:/app/services/invoice-service/migrations:delegated
    depends_on:
      - invoice-db
      - redis_invoice
      - kafka
      - order-service
    command: sh -c 'yarn mup && yarn start:prod'
  
  order-service:
    container_name: order-service
    image: invoice_hub_microservices_order-service
    build:
      context: ../../
      dockerfile: Dockerfile
      args:
        NODE_PORT: 4003
        SERVICE_NAME: services/order-service
        ENV_PATH: ./deployment/prod/.env
    environment:
      - PORT=4003
      - POSTGRES_DB=order_service_db
      - DB_DEFAULT_DATABASE=order_service_db
      - DB_DEFAULT_HOST=order-db
      - DB_DEFAULT_PORT=5432
      - REDIS_HOST=redis_order_container
      - REDIS_PORT=6379
      - REDIS_PASSWORD=your_redis_password
      - REDIS_URL=redis://redis_order_container:6379
      - REDIS_DEFAULT_CACHE_TTL=3600
    networks:
      - common
    restart: always
    ports:
      - '4003:4003'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4001/api/v1/orders']
      interval: 10s
      retries: 3
    volumes:
      - ../../common:/app/common
      - ../../services/order-service/migrations:/app/services/order-service/migrations:delegated
    depends_on:
      - order-db
      - redis_order
      - kafka
    command: sh -c 'yarn mup && yarn start:prod'

networks:
  common:
    driver: bridge

volumes:
  zookeeper-data:
  kafka-data:
  auth-postgres-data:
  invoice-postgres-data:
  order-postgres-data:
  grafana-data:
  redis_auth_data:
  redis_invoice_data:
  redis_order_data:
